{
module Lexer

open System
open Parser
open Microsoft.FSharp.Text.Lexing

let ops = 
    [
        "=", ASSIGN;
        "+", PLUS;
        "-", MINUS;
        "*", MULT;
        "/", DIV;
        "(", LPAREN;
        ")", RPAREN;
        "^", POW;
        "{", LBRACKET;
        "}", RBRACKET;
    ] |> Map.ofList

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf
}   
  
// regex macros
let char        = ['a'-'z' 'A'-'Z']
let text        = ['a'-'z' 'A'-'Z']+
let digit       = ['0'-'9']
let frac        = '.' digit*
let int         = digit+
let float       = digit* frac?
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let operators   = "=" | "+" | "-" | "*" | "/" | "^" | "(" | ")" | "{" | "}"
 
// rules   
rule tokenize = parse
| whitespace    { tokenize lexbuf }
| newline       { NEWLINE }
| ','           { COMMA }
| text          { ID (lexeme lexbuf )}
| int			{ INT (int (lexeme lexbuf)) }
| float			{ FLOAT (float (lexeme lexbuf)) }
| operators		{ match ops.TryFind(lexeme lexbuf) with
                    | Some (token) -> token
                    | None -> ID (lexeme lexbuf) }
| eof           { EOF }
