{
module Lexer

open System
open Parser
open Microsoft.FSharp.Text.Lexing

let ops = 
    [
        "+", PLUS;
        "-", MINUS;
        "*", MULT;
        "/", DIV;
    ] |> Map.ofList

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf
}   
  
// regex macros   
let char        = ['a'-'z' 'A'-'Z']
let text        = ['a'-'z' 'A'-'Z']+
let digit       = ['0'-'9']   
let int         = digit+   
let float       = digit+ '.' digit+   
let whitespace  = [' ' '\t']   
let newline     = "\n\r" | '\n' | '\r'  
let operators	= "+" | "-" | "*" | "/"
 
// rules   
rule tokenize = parse   
| whitespace    { tokenize lexbuf }   
| newline       { NEWLINE }   
| text          { ID (lexeme lexbuf )}
| int			{ INT (Int32.Parse(lexeme lexbuf)) }
| float			{ FLOAT (Double.Parse (lexeme lexbuf)) }
| operators		{ match ops.TryFind(lexeme lexbuf) with
                    | Some (token) -> token
                    | None -> ID (lexeme lexbuf) }
| "="           { ASSIGN }
| eof           { EOF }
