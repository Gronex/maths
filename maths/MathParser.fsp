%{
open Ast
%}

%start start
%token <string> ID
%token <int> INT
%token <float> FLOAT

%token LPAREN RPAREN
%token MULT DIV
%token PLUS MINUS
%token POW
%token ASSIGN
%token NEWLINE EOF
%type <Ast.Prog> start

%nonassoc ASSIGN
%left PLUS MINUS
%left MULT DIV
%left POW

%%

start : Prog { $1 }

Prog: StmtList { List.rev($1) }

Expr: ID { Var($1) }
	| INT { Num(double $1) }
	| FLOAT { Num($1) }
	| Expr PLUS Expr { Plus($1, $3) }
	| Expr MINUS Expr { Minus($1, $3) }
	| Expr MULT Expr { Mult($1, $3) }
	| Expr DIV Expr { Div($1, $3) }
	| MINUS Expr { Minus(Num(0.0), $2) }
	| LPAREN Expr RPAREN { Grp($2) }
    | Expr POW Expr { Pow($1, $3) }

Stmt: ID ASSIGN Expr { Assign($1, $3) }
	| Expr { Expr($1) }


StmtList: Stmt { [$1] }
	| StmtList NEWLINE Stmt { $3 :: $1}
%%