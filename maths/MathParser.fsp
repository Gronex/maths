%{
open Ast
%}

%start start
%token <string> ID
%token <int> INT
%token <float> FLOAT

%token COMMA
%token LPAREN RPAREN LBRACKET RBRACKET
%token MULT DIV
%token PLUS MINUS
%token POW
%token ASSIGN
%token NEWLINE EOF
%type <Ast.Prog> start

%left PLUS MINUS
%left MULT DIV
%left POW

%%

ArgList: 
    | ID { [$1] }
	| ArgList COMMA ID { $3 :: $1 }
    ;

ExprList: 
    | Expr { [$1] }
    | ExprList COMMA Expr { $3 :: $1 }
    ;

StmtList: 
    | Stmt { [$1] }
	| StmtList NEWLINE Stmt { $3 :: $1 }
    ;

start : Prog { $1 }

Prog: StmtList { List.rev($1) }

Expr: 
    | ID { Var($1) }
	| INT { Num(double $1) }
	| FLOAT { Num($1) }
	| Expr PLUS Expr { Plus($1, $3) }
	| Expr MINUS Expr { Minus($1, $3) }
	| Expr MULT Expr { Mult($1, $3) }
	| Expr DIV Expr { Div($1, $3) }
	| MINUS Expr { Minus(Num(0.0), $2) }
	| LPAREN Expr RPAREN { Grp($2) }
    | Expr POW Expr { Pow($1, $3) }

Stmt: 
    | assign { $1 }
    | apply { $1 }
	| Expr { Expr($1) }
    ;

assign:
    | ID ASSIGN Expr { Assign($1, $3) }
    | ID LPAREN ArgList RPAREN ASSIGN Stmt { FunAssign($1, List.rev($3), [$6]) }
    | ID LPAREN ArgList RPAREN ASSIGN LBRACKET StmtList RBRACKET { FunAssign($1, List.rev($3), List.rev($7)) }
    ;

apply:
    | ID LPAREN ExprList RPAREN { Apply($1, List.rev($3)) }
    ;
%%